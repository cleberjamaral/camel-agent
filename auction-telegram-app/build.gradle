/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
	mavenLocal()
}

ext {
	versions = [
		camel       : '2.12.3',
	]
}

dependencies {

	// This dependency is exported to consumers, that is to say found on their compile classpath.
	api 'org.apache.commons:commons-math3:3.6.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.guava:guava:23.0'

	// Use JUnit test framework
	testImplementation 'junit:junit:4.12'

	// https://mvnrepository.com/artifact/commons-lang/commons-lang
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	// https://mvnrepository.com/artifact/org.apache.camel/camel-telegram
	compile group: 'org.apache.camel', name: 'camel-telegram', version: '2.22.1'
	// https://mvnrepository.com/artifact/javax.xml.soap/javax.xml.soap-api
	compile group: 'javax.xml.soap', name: 'javax.xml.soap-api', version: '1.4.0'
	// https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	// https://mvnrepository.com/artifact/javax.activation/activation
	compile group: 'javax.activation', name: 'activation', version: '1.1.1'

	compile group: 'nz.ac.otago.infosci.camelagent.component', name: 'camelagent', version: '1.1.3'

}

eclipse {
	classpath {
		downloadJavadoc = true
		file.whenMerged { cp ->
			logger.lifecycle "Removing duplicate classpath entries from eclipse for project '${project.name}'"

			Map entryByPath = cp.entries.groupBy { entry -> entry.path }
			entryByPath.each { key, values ->
				if (values.size() > 1) {
					def entry = values.first()
					if (entry.kind == 'src') {
						entry.includes = []
						entry.excludes = []
					}
					int index = cp.entries.indexOf entry
					logger.lifecycle "Removing ${values.collect { it.path }}"
					cp.entries.removeAll values
					logger.lifecycle "Adding ${entry.path}"
					cp.entries.add index, entry
				}
			}
		}
	}
}