/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	mavenCentral()
	mavenLocal()
}

ext {
	versions = [
		camel       : '2.19.1',
	]
}

dependencies {

	// This dependency is exported to consumers, that is to say found on their compile classpath.
	api 'org.apache.commons:commons-math3:3.6.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.guava:guava:23.0'

	// Use JUnit test framework
	testImplementation 'junit:junit:4.12'

	// https://mvnrepository.com/artifact/org.apache.camel/camel-core
	compile group: 'org.apache.camel', name: 'camel-core', version: versions.camel
	// https://mvnrepository.com/artifact/commons-lang/commons-lang
	compile group: 'commons-lang', name: 'commons-lang', version: '2.3'
	// https://mvnrepository.com/artifact/net.sf.jason/jason
	compile group: 'net.sf.jason', name: 'jason', version: '2.2'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	// https://mvnrepository.com/artifact/log4j/log4j
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	// https://mvnrepository.com/artifact/net.sf.corn/corn-cps
	compile group: 'net.sf.corn', name: 'corn-cps', version: '1.1.7'

	// https://mvnrepository.com/artifact/org.apache.camel/camel-test
	testCompile group: 'org.apache.camel', name: 'camel-test', version: versions.camel
	// https://mvnrepository.com/artifact/org.apache.camel/camel-zookeeper
	testCompile group: 'org.apache.camel', name: 'camel-zookeeper', version: versions.camel
	// https://mvnrepository.com/artifact/org.apache.camel/camel-cxf
	testCompile group: 'org.apache.camel', name: 'camel-cxf', version: versions.camel
	// https://mvnrepository.com/artifact/org.apache.camel/camel-script
	testCompile group: 'org.apache.camel', name: 'camel-script', version: versions.camel
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
	testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
}

task createPom {
	doLast {
		pom {
			project {
				groupId 'nz.ac.otago.infosci'
				artifactId 'camelagent'
				version '1.1.3'
				name 'Camel Agent Component'

				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'https://github.com/cleberjamaral/camel-agent/raw/maven2'
					}
				}
			}
		}.writeTo("pom.xml")
	}
}

eclipse {
	classpath {
		downloadJavadoc = true
		file.whenMerged { cp ->
			logger.lifecycle "Removing duplicate classpath entries from eclipse for project '${project.name}'"

			Map entryByPath = cp.entries.groupBy { entry -> entry.path }
			entryByPath.each { key, values ->
				if (values.size() > 1) {
					def entry = values.first()
					if (entry.kind == 'src') {
						entry.includes = []
						entry.excludes = []
					}
					int index = cp.entries.indexOf entry
					logger.lifecycle "Removing ${values.collect { it.path }}"
					cp.entries.removeAll values
					logger.lifecycle "Adding ${entry.path}"
					cp.entries.add index, entry
				}
			}
		}
	}
}

