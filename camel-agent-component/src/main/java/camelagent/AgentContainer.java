///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Cranefield S., Ranathunga S. All rights reserved.               /
// ---------------------------------------------------------------------------------- /
// This file is part of camel_jason.                                                  /

//    camel_jason is free software: you can redistribute it and/or modify             /
//   it under the terms of the GNU Lesser General Public License as published by      /
//    the Free Software Foundation, either version 3 of the License, or               /
//    (at your option) any later version.                                             /

//    camel_jason is distributed in the hope that it will be useful,                  /
//    but WITHOUT ANY WARRANTY; without even the implied warranty of                  /
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                   /
//    GNU Lesser General Public License for more details.                             /

//    You should have received a copy of the GNU Lesser General Public License        /
//    along with camel_jason.  If not, see <http://www.gnu.org/licenses/>.            /  
///////////////////////////////////////////////////////////////////////////////////////
package camelagent;


import jason.asSemantics.Message;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import jason.asSyntax.Literal;

import camelagent.util.ContainerNamingStrategy;

/**
 * @author surangika
 * Manages Jason agents in a Camel context
 */
public class AgentContainer {
	private static Vector<SimpleJasonAgent> agentList= new Vector<SimpleJasonAgent> ();
	private Vector<String> agentNameList;
	SimpleJasonAgent ag;	
	
	public AgentContainer()
	{
		this(null);
	}
	public AgentContainer(ContainerNamingStrategy strat)
	{				
		String containerId = "";
		if (strat != null)
			containerId= strat.getName();
		
		//agentList = new Vector<SimpleJasonAgent> ();
		agentNameList = new Vector<String>();		
		
		List<File> subDirs = getSubdirs(new File("."));
		for (File subDir : subDirs)
		{
			File[] files = subDir.listFiles();
			for (File file : files) {
				if (file.isFile() && file.getName().endsWith(".asl")) {
					String fName = file.getName();
					fName = fName.substring(0, fName.indexOf(".asl"));
					String name = "";
					//If there is a containerId generated by a naming strategy (Currently Zookeeper container name is used as the name )
					if (containerId != "")
						name = containerId+"__"+fName;
					else
						name = fName;
					ag = new SimpleJasonAgent(this, file.getAbsolutePath(), name);
					if (!agentNameList.contains(fName)){
						agentList.add(ag);
						agentNameList.add(fName);
					}
				}
			}
		}
	}
	
	/**
	 * @param file
	 * @return
	 * Finds all subdirectories of the current folder
	 */
	private List<File> getSubdirs(File file) {
	    List<File> subdirs = Arrays.asList(file.listFiles(new FileFilter() {
	        public boolean accept(File f) {
	            return f.isDirectory();
	        }
	    }));
	    subdirs = new ArrayList<File>(subdirs);

	    List<File> deepSubdirs = new ArrayList<File>();
	    for(File subdir : subdirs) {
	        deepSubdirs.addAll(getSubdirs(subdir)); 
	    }
	    subdirs.addAll(deepSubdirs);
	    return subdirs;
	}
	
	public void createAgent()
	{
		
	}
	
	public void startAllAgents()
	{
		Enumeration<SimpleJasonAgent> e = getAgents().elements();
                
        while (e.hasMoreElements()) {
 	    	SimpleJasonAgent j = e.nextElement();	  	    	
 	    	if (!j.getHasStarted())
 	    		j.run();
 	    }
	}
	
	public static Vector<SimpleJasonAgent> getAgents()
	{
		return agentList;
	}
	
	/**
	 * @param content
	 * @param receiver
	 * @param annotations
	 * @param updateMode
	 * @param persistent
	 * receive the percepts from the camel exchange, and pass it to a particular agent or all the agents, based on the value of the receiver parameter
	 */
	public void getCamelpercepts(Collection<Literal> content, String receiver, String annotations, String updateMode, String persistent)
	{
		try
		{	
			Iterator<SimpleJasonAgent> it = agentList.iterator();
            for (; it.hasNext();)
            { 
            	SimpleJasonAgent a = it.next();
            	if (!receiver.equals("")) {
					if (a.getAgName().equals(receiver))
						a.updatePerceptList(content, annotations, updateMode, persistent);
				}
            	else {
                    System.out.println("Updating percepts for agent " + a.getAgName() + "; content = " + content);
                    a.updatePerceptList(content, annotations, updateMode, persistent);
                }
            }
		}
		catch(Exception e)
		{
                    System.out.println("Exception in AgentContainer.getCamelPercepts: " + e.getMessage());
		}
	}
		
	/**
	 * @param message
	 * @param receiver
	 * 
	 * receive the messages from the camel exchange, and pass it to a particular agent or all the agents, based on the value of the receiver parameter
	 */
	public void getCamelMessages(Message message, String receiver)
	{	
		try
		{	
			Iterator<SimpleJasonAgent> it = agentList.iterator();
            for (; it.hasNext();)
            {
            	SimpleJasonAgent a = it.next();
            	
            	//if the receiver value is "all", send the message to all the agents in the context
            	if (receiver.equals("all"))
            	{
            		Message tm = message;
            		if (!a.getAgName().equals(message.getSender())) {
						tm.setReceiver(a.getAgName());
						a.updateMsgQueue(tm);
					}
            	}
            	else if (a.getAgName().equals(receiver))
            		a.updateMsgQueue(message);
            }
		}
		catch(Exception e)
		{			
		}		
	}	
}
